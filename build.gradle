plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'com.moowork.node' version '1.3.1'
	id 'org.asciidoctor.jvm.convert' version '3.1.0'
}


import groovy.json.JsonSlurper
def packageSlurper = new JsonSlurper()
def packageJson = packageSlurper.parse file('package.json')
version = packageJson.version

group = 'bjdev'
sourceCompatibility = '8'

repositories {
	mavenCentral()
}

asciidoctor {
	baseDirFollowsSourceFile()
	
	outputDir file('build/docs')
	
	attributes \
		'toc': 'left',
		'toclevels': 4,
		'icons': 'font',
		'my-doc' : file('docs'),
		'docs-images-dir': file('docs/images').absolutePath 
}


dependencies {
	compile 'commons-io:commons-io:2.7'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.hateoas:spring-hateoas'
	
	runtimeOnly 'com.h2database:h2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}


task webpack(type: NodeTask, dependsOn: 'npmInstall'){
	def osName = System.getProperty("os.name").toLowerCase();
	if (osName.contains("windows")) {
 		script = project.file('node_modules/webpack/bin/webpack.js')
 	} else {
 		script = project.file('node_modules/.bin/webpack')
	}
}


test {
	useJUnitPlatform()
}

